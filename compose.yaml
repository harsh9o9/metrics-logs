# some notes for me to remeber
# ports structure is -> host_port:container_port
# build: -> this specifies the context and dockerfile to use
# context: . -> directory containing the Dockerfile

services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
    ports:
      - 8080:8080
    container_name: node-api-service
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    container_name: prometheus-service
    networks:
      - monitoring

  grafana:
    image: grafana/grafana-oss
    ports:
      - 3000:3000
    container_name: grafana-service
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - monitoring

  grafana-loki:
    image: grafana/loki
    ports:
      - 3100:3100
    container_name: grafana-loki-service
    networks:
      - monitoring

volumes:
  grafana-data:

networks:
  monitoring:
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

